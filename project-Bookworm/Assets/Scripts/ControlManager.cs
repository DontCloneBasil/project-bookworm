//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/ControlManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlManager: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlManager"",
    ""maps"": [
        {
            ""name"": ""Book"",
            ""id"": ""af8425e6-d50e-4453-b447-b717dc1070f2"",
            ""actions"": [
                {
                    ""name"": ""flip"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b47a3d01-9b95-498f-be24-07f001cea8bc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""33f07129-400e-4320-9854-5ddd25c86fc6"",
                    ""path"": ""2DVector"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""flip"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a9a274c7-e5bd-47d5-9e84-ba96fd97d853"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""flip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""09a5dab4-787e-4f0d-833a-7ff1d9d849ac"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""flip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""User"",
            ""id"": ""224ec615-b90d-4fd3-957a-a32d01acc020"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f31bb2cb-e2b5-40b7-801a-673a695b8f05"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""da0d127f-c7e1-4c3a-b047-795f0c0c6346"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d449dde2-42b1-4440-a607-f2ac938618ff"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickUp"",
                    ""type"": ""Button"",
                    ""id"": ""be5f2745-db4d-43ec-80ab-b4ecc3f446d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""234efc19-27f7-45f8-8532-f0f82fb10f2c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""422ac26d-f8e2-4dda-bb2a-6d4c3dca7150"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f1660d5d-4c50-4215-8205-63e85b02c937"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""db46df2a-209b-40a7-a868-60ac90bea805"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""71b7b650-1ce4-434b-b4aa-68a07e714745"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""db23e073-7b78-4489-a97d-132ae174bcdf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""d606faad-f3d8-49cd-9da1-2c689a817074"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""37cdd975-7204-4f58-9542-63a118afcd24"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2d3d372e-35ac-4e86-ba45-117360b8258b"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9eeabe83-43d1-4d38-bd49-56956086233c"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e27a90df-0968-4ad2-9ad0-896c9d1a1099"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c970688f-6eae-496a-a2a0-03570f37cd3b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Book
        m_Book = asset.FindActionMap("Book", throwIfNotFound: true);
        m_Book_flip = m_Book.FindAction("flip", throwIfNotFound: true);
        // User
        m_User = asset.FindActionMap("User", throwIfNotFound: true);
        m_User_Move = m_User.FindAction("Move", throwIfNotFound: true);
        m_User_MouseX = m_User.FindAction("MouseX", throwIfNotFound: true);
        m_User_MouseY = m_User.FindAction("MouseY", throwIfNotFound: true);
        m_User_PickUp = m_User.FindAction("PickUp", throwIfNotFound: true);
        m_User_Drop = m_User.FindAction("Drop", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Book
    private readonly InputActionMap m_Book;
    private List<IBookActions> m_BookActionsCallbackInterfaces = new List<IBookActions>();
    private readonly InputAction m_Book_flip;
    public struct BookActions
    {
        private @ControlManager m_Wrapper;
        public BookActions(@ControlManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @flip => m_Wrapper.m_Book_flip;
        public InputActionMap Get() { return m_Wrapper.m_Book; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BookActions set) { return set.Get(); }
        public void AddCallbacks(IBookActions instance)
        {
            if (instance == null || m_Wrapper.m_BookActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BookActionsCallbackInterfaces.Add(instance);
            @flip.started += instance.OnFlip;
            @flip.performed += instance.OnFlip;
            @flip.canceled += instance.OnFlip;
        }

        private void UnregisterCallbacks(IBookActions instance)
        {
            @flip.started -= instance.OnFlip;
            @flip.performed -= instance.OnFlip;
            @flip.canceled -= instance.OnFlip;
        }

        public void RemoveCallbacks(IBookActions instance)
        {
            if (m_Wrapper.m_BookActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBookActions instance)
        {
            foreach (var item in m_Wrapper.m_BookActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BookActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BookActions @Book => new BookActions(this);

    // User
    private readonly InputActionMap m_User;
    private List<IUserActions> m_UserActionsCallbackInterfaces = new List<IUserActions>();
    private readonly InputAction m_User_Move;
    private readonly InputAction m_User_MouseX;
    private readonly InputAction m_User_MouseY;
    private readonly InputAction m_User_PickUp;
    private readonly InputAction m_User_Drop;
    public struct UserActions
    {
        private @ControlManager m_Wrapper;
        public UserActions(@ControlManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_User_Move;
        public InputAction @MouseX => m_Wrapper.m_User_MouseX;
        public InputAction @MouseY => m_Wrapper.m_User_MouseY;
        public InputAction @PickUp => m_Wrapper.m_User_PickUp;
        public InputAction @Drop => m_Wrapper.m_User_Drop;
        public InputActionMap Get() { return m_Wrapper.m_User; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UserActions set) { return set.Get(); }
        public void AddCallbacks(IUserActions instance)
        {
            if (instance == null || m_Wrapper.m_UserActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UserActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @MouseX.started += instance.OnMouseX;
            @MouseX.performed += instance.OnMouseX;
            @MouseX.canceled += instance.OnMouseX;
            @MouseY.started += instance.OnMouseY;
            @MouseY.performed += instance.OnMouseY;
            @MouseY.canceled += instance.OnMouseY;
            @PickUp.started += instance.OnPickUp;
            @PickUp.performed += instance.OnPickUp;
            @PickUp.canceled += instance.OnPickUp;
            @Drop.started += instance.OnDrop;
            @Drop.performed += instance.OnDrop;
            @Drop.canceled += instance.OnDrop;
        }

        private void UnregisterCallbacks(IUserActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @MouseX.started -= instance.OnMouseX;
            @MouseX.performed -= instance.OnMouseX;
            @MouseX.canceled -= instance.OnMouseX;
            @MouseY.started -= instance.OnMouseY;
            @MouseY.performed -= instance.OnMouseY;
            @MouseY.canceled -= instance.OnMouseY;
            @PickUp.started -= instance.OnPickUp;
            @PickUp.performed -= instance.OnPickUp;
            @PickUp.canceled -= instance.OnPickUp;
            @Drop.started -= instance.OnDrop;
            @Drop.performed -= instance.OnDrop;
            @Drop.canceled -= instance.OnDrop;
        }

        public void RemoveCallbacks(IUserActions instance)
        {
            if (m_Wrapper.m_UserActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUserActions instance)
        {
            foreach (var item in m_Wrapper.m_UserActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UserActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UserActions @User => new UserActions(this);
    public interface IBookActions
    {
        void OnFlip(InputAction.CallbackContext context);
    }
    public interface IUserActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnMouseX(InputAction.CallbackContext context);
        void OnMouseY(InputAction.CallbackContext context);
        void OnPickUp(InputAction.CallbackContext context);
        void OnDrop(InputAction.CallbackContext context);
    }
}
